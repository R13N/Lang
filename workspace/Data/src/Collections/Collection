Collection
----------

The root interface in the collection hierarchy.

A collection represents a group of objects, known as its elements. Some collections allow duplicate elements and others do not. Some are ordered and others unordered.

----------

import Data.Functor
import Data.Monoid


--# Interface definition


class Collection a:
	-- Creates a new, empty collection
	> size empty		= 0
	> empty.contains a	= False
	empty			: collection a
	-- adds an element to this collection.
	add		: a :> b => a -> c b -> c a

	--- Gives you one element of the collection.
		When the collection is empty, ''Nothing'' will be returned.
		There is no guarantee about what element in the collection will be returned. ---
	> head empty	= Nothing
	> head $ empty.add a	= Just a
	head		: c a -> a?

	-- Gives you the collection, but without the element returned by head.
	> tail empty	= Nothing
	~ Completeness: c:Collection a=> add (head c) (tail c) = c
	tail		: collection a -> (collection a)?

	-- checks wether (or not) something is element of this collection
	> contains after add guarantee: c:Collection a => (c.add a).contains a = True
	contains	: a -> collection a -> Bool

	-- returns the number of elements in collection.
	> c:Collection c => isEmpty c = (0 == size c)
	size		: c a -> Nat

-- # Instance declarations

--- Collections have many usefull properties: they are Monoids (allowing a flexible reduce) and functors: mapping stuff is usefull, isn't it? ---

instance Monoid Collection
  neutral	: Collection a
	= empty

  append	: Collection c => c -> c -> c
	= union


instance Functor Collection
  map		: Collection c => (a -> b) -> c a -> c b
    f ((:) h t)	= add (f h) $ map f t


-- # Utils
-- Some usefull functions to make your life easier!

-- ## Reduce, fold, ...

reduce		: m:Monoid => Collection m -> m
  ((:) h t)	= append h (reduce t)


reduce		: m:Monoid => Collection m -> m -> m
  ((:) h t) m	= t.reduce (append (h m))




-- ## Misc tools

-- Converts a collection into any other collection
convert	: c:Collection a => Collection a -> c a
c	= union c empty

-- Deconstructs a collection into its head and tail
(:)		: c:Collection => c a -> Maybe (a, c a)
  c		= decon (head c) (tail c)

-- helper function for (:)
_decon		: c:Collection => Maybe a -> c a -> Maybe (a, c a)
  Nothing _	= Nothing
  (Just a) as	= (a, as)

--- Merges two collections.
	If the right argument is a specific instance (e.g. ''SortedSet''),
	the result will be a the specific instance too (thus a sortedSet)
union		: c:Collection => Collection a -> c a -> c a
  > c1,c2:Collection a: (c1.contains a || c2.contains a) == (union c1 c1).contains a = True
  ((:) h t) c
		= union t c.add h
  _ c		= c


-- Returns ''True'' iff the collection contains exactly one element
  > containsOne $ empty.add a	= True
  > containsOne $ empty		= False
containsOne	: Collection a -> Bool
  ((:) _ t)	= isEmpty t
  *			= False


-- Returns True iff the collection is empty
  > isEmpty empty = True
  > c:Collection a => (c.add a).isEmpty = False
isEmpty		: c a -> Bool
  c		= 0 == size c
