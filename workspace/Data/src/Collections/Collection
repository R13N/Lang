Collection
----------

Congratulations, dear explorer.
You have found the root of all data, the root of each collection.

This module gives the class interface of each collection.
----------

import Category.Monoid
import Category.Function

-- A collection represents, well, a collection of data. Each set, list, map, bag, ... is instance of this class
cat Collection a
	-- Give the first element of the collection
	head	: collection a -> (b:a)?
	-- Give the entire collection without the element that head gives
	tail	: collection a -> (collection (b:a))?
	-- Give the first element of the collection, only if exactly one element is in the collection
	singleton	: collection a -> (b:a)?
	-- empty constructor
	empty	: collection a
	-- empty the given collection. In other words, start a new collection with the same internal structure
	empty	: collection a -> collection a
	-- empty deconstructor
	isEmpty	: collection -> Bool


reduce	: Associative a -> a+ -> a
f (singleton a)	= a
f (unpack a as)	= f a $ reduce f as

---
reduce	: (m:Monoid)* -> m
|isEmpty	= neutral
(m:ms)	= append m $ reduce ms
---
