Misc
----

Some miscallaneous, general functions, such as id and const.
----

import Data.Bool

-- The identity function, returns it's argument
> id 42		= 42
~ id: a => id a 	= a
> neutral: id id 	= id
id	: a -> a
a	= a


-- The const function, returns it first argument (and ignores the second)
> const 42 "String"	= 42
const	: a -> b -> a
a _	= a

-- Conditional choice
if		: Bool -> a -> a -> a
if True  a _	= a
if False _ b	= b 

-- Flips the arguments of the given function
> flip const 42 "String"	= "String"
~ double flip: f => flip $ flip f = f
flip	: (a -> b -> c) -> b -> a -> c
f b a	= f a b


-- Used for lensing, applies the function on the right on the argument on the left to provide OO-like syntax
~ application: a:a, f : (a -> b) => a.f = f a
> [1,2,3].map (+1)	= [2,3,4]
(.)	: a -> (a -> b) -> b
a f	= f a

(.)	: a -> (b -> a -> a) -> b -> a
a f b	= f b a

(.)		: (a -> b) -> (b -> c) -> a -> c
a2b b2c a	= b2c (a2b a)

-- Used in lensing, lifts one state-change into the other to chain those telescopically
(.)		: ((b -> b) -> a -> a) -> ((c -> c) -> b -> b) -> (c -> c) -> a -> a
bbaa ccbb cc a	= bbaa (ccbb cc) a



(?)		: a? -> a -> a
(Just a) _	= a
_ 	 a	= a

-- Unpacks the 'Maybe'. If it is nothing, the default value is used.
--~ id: a,x => (Just a) ? x = a
--> Nothing ? 1	= 1
-- > (Just 42) ? 1	= 42

