Monoid
------
Declaration and functions for Monoids
------

import Num.Nat

---
A monoid is an type on which a neutral (identity) element and an _addition_ operator is defined.
The addition operator should be associative.

By adding the associativity, the compiler has a high degree of freedom in optimizing the order in which the operation is performed. Because all collections are monoids, this means (for example) taking unions can be done in parallel without much ado, with a mapReduce.
---
cat Monoid
	-- The neutral element
	~ identity element:	append neutral a	= a
	~ identity element:	append a neutral	= a
	neutral	: monoid
	-- The addition operator.
	~ associativity: a,b,c:Monoid => append (append a b) c = append a (append b c)
	append	: monoid -> monoid -> monoid


-- Sum is an instance of monoid, with (+) defined as append
cat Sum
	(+)	: sum -> sum -> sum
	zero	: sum


-- Product is an instance of monoid, with (*) defined as append
cat Product
	(*)	: product -> product -> product
	one	: product

instance Monoid Sum

append	: Sum -> Sum -> Sum
a b	= a + b

neutral	: Sum
neutral	= 0

(*)	: Sum -> Nat -> Sum
_ 0	= neutral
s i	= s + (s * (i - 1))

instance Monoid Product

append	: Product -> Product -> Product
a b	= a * b

neutral	: Product
neutral	= 1

(^)	: Product -> Nat -> Product
_ 0	= neutral
p i	= p * (p * (i - 1))
