Monoid
------
Declaration and functions for ''Monoids'', ''Sum'' and ''Product''
------

import Num.Nat
import Category.Function

---
A ''Monoid'' is an type which has _neutral element_ and an _addition_.
The addition operator should be ''Associative''.

By adding the associativity, the compiler has a high degree of freedom in optimizing the order in which the operation is performed. Because all collections are monoids, this means (for example) taking unions can be done in parallel without much ado, with a mapReduce.
---
cat Monoid
	-- The neutral element
	~ identity element:	append a neutral	= a
	neutral	: monoid
	-- The addition operator.
	append	: monoid -> monoid -> monoid & Associative monoid


-- An instance of ''Monoid'', with ''+'' defined as append and ''0'' as neutral element.
cat Sum
	(+)	: sum -> sum -> sum & Associative sum
	zero	: sum


-- An instance of ''Monoid'', with ''*'' defined as append and ''1'' as neutral element.
cat Product
	(*)	: product -> product -> product & Associative sum
	one	: product

instance Sum is Monoid

append	: Sum -> Sum -> Sum
a b	= a + b

neutral	: Sum
neutral	= 0


precedence of (^) is Left, (^) < (*)
precedence of (*) is Left, (*) < (+)
precedence of (+) is Left, (+) < (<)
(*)	: Sum -> Nat -> Sum
_ 0	= neutral
s i	= s + (s * (i - 1))

instance Product is Monoid

append	: Product -> Product -> Product
a b	= a * b

neutral	: Product
neutral	= 1

(^)	: Product -> Nat -> Product
_ 0	= neutral
p i	= p * (p * (i - 1))
