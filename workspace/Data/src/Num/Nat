Nat
---
Home of Nat, Nat', NatInf, NatInf', Int, Int', IntInf, IntInf'
---

import Builtins

-- An _integer_ or positive or negative _Infinity_ (''Inf'').
   type IntInf		= Builtins.BIInt
-- An _integer_ which is not zero, or positive or negative _Infinity_ (''Inf'').
subtype IntInf'		= _ IntInf
-- An _integer_
subtype Int		= _ IntInf
-- An _integer_ which is not zero
subtype Int'		= _ IntInf' & Int	-- No Inf, no zero

-- A natural number or _infinity_ (''Inf'').
subtype NatInf		= _ IntInf
-- A natural number (which is not zero) or _infinity_ (''Inf'').
subtype NatInf'		= _ NatInf
-- A natural number
subtype Nat		= _ NatInf
-- A natural number, which is not zero.
subtype Nat'		= _ NatInf' & Nat

-- Adds one to a number. A natural number + 1 is guaranteed not to be zero.
succ	: Nat 		-> Nat'
succ	: NatInf 	-> NatInf'
succ	: Int 		-> Int
succ	: IntInf 	-> IntInf
n	= #succ n

abs	: Int 		-> Nat
abs	: Int' 		-> Nat'
abs	: IntInf 	-> NatInf
abs	: IntInf' 	-> NatInf'
i	= #abs


precedence of (*) is Left, (*) = (%), (*) = (/), (*) = (//)
precedence of (+) is Left, (+) = (-)
-- (+) is Associative and Commutative for IntInf -> IntInf, out of which follows it is these too for (+) which work for subtypes of IntInf
(+)	: IntInf -> IntInf	-> IntInf -- & Associative IntInf & Commutative IntInf IntInf
(+)	: Nat -> Nat 	-> Nat
(+)	: Nat -> Nat' 	-> Nat'
(+)	: Nat' -> Nat 	-> Nat'
(+)	: NatInf -> NatInf -> NatInf
(+)	: Int -> Int	-> Int
i j	= #plus i j
