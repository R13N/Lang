Nat
---
Simple, naive natural number implementation.
---

import Category.Eq
import Data.Bool
import Collection.Maybe
import ControlFlow
import Data.Char
import Collection.List

-- A natural number, which might be zero
data Nat	= Zero | Succ Nat

type Nat'	= Nat

instance Nat is Eq

fib	: Nat -> Nat
0	= 0
1	= 1
(Succ i)	= fib i + fib (i - 1)


precedence of (+) is left, (+) > (*)
precedence of (-) is left, (-) = (+)
precedence of (*) is left
precedence of (/) is left, (/) = (*)


(+)		: Nat -> Nat -> Nat
(Succ i) j	= Succ (i + j)
0 j		= j

(*)		: Nat -> Nat -> Nat
(Succ i) j	= j + (i*j)
0 j		= 0

-- Subtraction which returns zero instead of negative numbers
> 5 - 6 = 0
(-)		: Nat -> Nat -> Nat
(Succ i) (Succ j)= i - j
0 j		= 0
i 0		= i

(/)		: Nat -> Nat' -> Nat
i q		= if (i < q) 0 (1 + ((i-q)/q))

(%)		: Nat -> Nat' -> Nat
i q		= if (i < q) i ((i-q) % q)

(<)		: Nat -> Nat -> Bool
_ 0		= False
0 j		= True
(Succ i) (Succ j)= i < j

pred		: Nat' -> Nat
(Succ i)	= i
Zero		= Zero

succ		: Nat -> Nat'
		= Succ



stringify	: Nat -> [Char]
i		= if (i < 10) [Char (48+i)] (stringify (i/10) + stringify (i%10))
