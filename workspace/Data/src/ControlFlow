Misc
----
Some miscallaneous, control flow functions, such as id and const.
----

import Data.Bool
import Data.Maybe

-- The identity function, returns it's argument
> id 42		= 42
~ id: a => id a 	= a
> neutral: id id 	= id
id	: a -> a
a	= a


-- The const function, returns it first argument (and ignores the second)
> const 42 "String"	= 42
const	: a -> b -> a
a _	= a

-- Conditional choice
if		: Bool -> a -> a -> a
True  a _	= a
False _ b	= b 

-- Flips the arguments of the given function
> flip const 42 "String"	= "String"
~ double flip: f => flip $ flip f = f
flip	: (a -> b -> c) -> b -> a -> c
f b a	= f a b


-- Simple application; used in lensing, applies the function on the right on the argument on the left to provide OO-like syntax
~ application: a:a, f : (a -> b) => a.f = f a
> [1,2,3].map (+1)	= [2,3,4]
(.)	: a -> (a -> b) -> b
a f	= f a

