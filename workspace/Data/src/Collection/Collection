Collection
----------

Congratulations, dear explorer.
You have found the root of all data, the root of each collection.

This module gives the category declaration of each collection.
----------

import Category.Monoid
import Category.Function
import Category.Mappable
import Category.Eq
import Collection.Maybe
import Collection.Void
import Data.Bool
---
A ''Collection'' is a data structure which contains zero or more elements.

This declaration does not put requirements about the order in which elements are saved or wether duplicate elements are allowed or not.

The syntactic sugar ''a*'' desugars to ''Collection a''
---
cat Collection a
	-- Gives the first element of the collection
	head	: collection a -> (b:a)?
	-- Gives the entire collection without the element that head gives
	tail	: collection a -> (collection (b:a))?
	-- Gives the first element of the collection, only if exactly one element is in the collection
	singleton	: collection a -> (b:a)?
	-- empty constructor
	empty	: collection a
	-- empty the given collection. In other words, start a new collection with the same internal structure
	clear	: collection a -> collection a
	-- empty deconstructor
	isEmpty	: collection a -> Bool
	-- Empty deconstructor
	({})	: collection a -> Maybe ()
	(:)	: (a:b) -> collection b -> collection b


instance Collection is Mappable
instance Collection a is Monoid
instance Collection (a:Eq) is Eq
---
map	: (a -> b) -> a* -> b*
f empty	= empty
f (a:as)= add (f a) as


reduce	: Associative a -> a+ -> a
f (singleton a)	= a
f (unpack a as)	= f a $ reduce f as

reduce	: (m:Monoid)* -> m
empty	= neutral
(m:ms)	= append m $ reduce ms
---
