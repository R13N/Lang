Expressions

author		"Pieter Vander Vennet"
date		[2014, 6, 08, 19, 37, 42]
desc		"The syntaxis of an expression in Languate"

public import Prelude
import Comments

import Types

_call		::= localIdent | globalIdent

 -- TODO add "==" and "-" as op
 op		::= %( "(!['~(,)_\t\n\"a..zA..Z0..9\[\]{} ])"   "(![(,)\t\n\"a..zA..Z0..9 ])*" ) & ! "--"
		| "\{\}" | "\[\]" | "\(\)"
		| "-"

_commaSepExprP	::= expr ("," expr)+
_tuple		::= "\(" commaSepExprP "\)"	-- has to contain a ","
_commaSepExpr	::= expr ("," expr)*		-- can be a single expression too
_set		::= "\{" commaSepExpr "\}"	
_list		::= "\[" commaSepExpr "\]"

_arrowTuple	::= expr "-->" expr
_dictCont	::= arrowTuple ("," arrowTuple)*
_dict		::= "\{" dictCont "\}"
 -- expression not contains spaces (or containing spaces in () )
 simpleExpr	::= char | string | float | nat | tuple | dict | set | list | "\(" expr "\)" | "~\(" type "\)" | "~~" | call | op
 expr		::= simpleExpr+

