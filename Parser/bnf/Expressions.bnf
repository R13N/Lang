Expressions

author		"Pieter Vander Vennet"
date		[2014, 6, 08, 19, 37, 42]
desc		"The syntaxis of an expression in Languate"

public import Prelude

_call		::= localIdent | globalIdent

 -- TODO add "==" and "-" as op
 op		::= "(!['=(,)_\t\n\"a..zA..Z0..9\[\]{}- ])(![(,)\t\n\"a..zA..Z0..9 ])*" -- | "==" | "-"


_tuple		::= "\(" expr ("," expr)+ "\)"	-- has to contain a ","
_commaSepExpr	::= expr ("," expr)*		-- can be a single expression too
_set		::= "\{" commaSepExpr "\}"	-- dubbles as map, "-->" is a 'normal' operator
_list		::= "\[" commaSepExpr "\]"
 -- expression not contains spaces (or containing spaces in () )
 simpleExpr	::= call | nat | float | tuple | set | list | "\(" expr "\)" | op | "\n\t" expr
 expr		::= simpleExpr+

