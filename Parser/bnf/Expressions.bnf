Expressions

author		"Pieter Vander Vennet"
date		[2014, 6, 08, 19, 37, 42]
desc		"The syntaxis of an expression in Languate"

public import Prelude

 call		::= localIdent	| globalIdent

 op		::= "(!['=(,)_\t\n\"a..zA..Z0..9\[\]{} ])(![(,)\t\n\"a..zA..Z0..9 ])*"



 tuple		::= "\(" expr ("," expr)+ "\)"	-- has to contain a ","
_commaSepExpr	::= expr ("," expr)*		-- can be a single expression too
 set		::= "\{" commaSepExpr "\}"	-- dubbles as map, "-->" is a 'normal' operator
 list		::= "\[" commaSepExpr "\]"
 expr		::= (call | nat | float | tuple | set | list | "\(" expr "\)" | op )+

