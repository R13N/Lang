TypeDefs

author		"Pieter Vander Vennet"
date		[2013, 12, 23, 01, 18, 42]
desc		"The syntaxis of all kind of TypeDefinitions."

import Prelude
import Types
import Comments
import Functions


 -------------
 -- ADT DEF --
 -------------

_idents		::= localIdent+
_optNamed	::= (idents ":")? type
_named		::= (idents ":") type
-- first item is obligatedly named, to disambituate the parser; the first compromise of the language...
_namedSum	::= named (comma optNamed)*

_$constructor	::= globalIdent
_types		::= baseType+
_sum		::= "_"? constructor (namedSum | types)?

_nlt		::= "\n\t"
_simpleSums	::= ("\|" sum)+
-- contains the docstrings above or on the same line
_commentedSum	::= (comment | mlcomment) nlt "\|" sum commentedSum? | simpleSums comment?
_sums		::= (nlt commentedSum)*
_prod		::= sum simpleSums? comment? sums
_freeTypes	::= constrFreeType*
{- a comment is obligated, but an error will be given by another fase then the parser
Making a daxta type private has the only result that all it's constructors are private

-- example
data _ ABC	= AB | BC
==
data ABC	= _AB | _BC

-}
 data		::= nlcomments? "data" "_"? typeIdent freeTypes "=" prod

{-

data _BTree a where a is Ord
		= Top a (BTree a) (BTree a)
		| Nil
data a is Ord => _BTree a
		=

data _Btree (a: Ord) (b:[a])
		= Top
		| Nil
-}

 -------------
 -- SYN DEF --
 -------------

_typeDef	::= typeIdent freeTypes "=" type
 synonym	::= "type" typeDef

 -------------
 -- SUB DEF --
 -------------

 subtype	::= "subtype" typeIdent freeTypes "=" "_"? type ("\&" type)*

 ------------------------
 -- CATEGORY+INSTANCE DEF --
 ------------------------

-- comments are obligated, but it's not the parsers task to generate error messages
 cat		    ::= nlcomments? ("category"|"cat") globalIdent freeTypes subclass? classBody
_subclass	  ::= ("in" | "is") type ("," type)*
_classBody	::= (nltab (law | declaration | mlcomment | comment))+ nl

 instance	::= "instance" typeIdent baseType





{-
-- (only comments below this point) --


data
====

data Data a 	= A a | B Int
--or
data Record	= Record String Int Bool
		| Exception String LineNr
-- want named fields?

data Record	= A i : Int
		| B b : Bool, i : Int, path name : Name


record syntax also creates functions to set and modify: (e.g. for the last one:)

seti	: Record -> Int -> Record
modi	: Record -> Int -> Int -> Record

e.g. 'record.modi (+1)' or (.modi (+1) )

To make a single constructor private, add a _ before the constructor

-- docstring for record
data Record	= _A i : Int	-- docstring for record a
		-- alternative docstring location for b
		| B b : Bool	-- docstring for record b
		| C	| D	-- docstring for *both* C and D
(A is private, B is public)

To make all the constructors private, put an underscore before the name

data _Record	= ...


Type synonyms and subtypes
==========================

Use subtypes when there exists a datatype which does exactly what you need, but don't need all values.

type Name	= String	-- real synonym, strings can be used as Name
type Mappable a	= Functor a

subtype CanonicalPath	= FilePath

A subtype establishes a subset relationship. It means that every 'CanonicalPath' is a 'Filepath', but not vice-versa.
This means that each 'CanonicalPath-object' can be used in functions with 'FilePath' as argument, but not the other way round.
To create them, you use the constructor. This constructor has the same name as the subtype (thus 'CanonicalPath'). To keep the
constructor hidden withing the local module, you add an underscore.


subtype CanonicalPath	= _FilePath

Note that something can be a subtype of multiple classes.

subtype Int'	= Int & IntInf'

This implies, if i is in Int', i is in Int AND i is in IntInf'. This means that this i can be used in both functions. It also implies a common ancestor exists. (Which always does, the Universal type)

Classes
=======

A typeclass declares a number of functions (without the implementation). When a certain type has all these functions, it is (automatically) part of this typeclass.
E.g.

cat Show where
	show	: Show -> String


Bool implements show, there is *no* need to make it explicit:

show : Bool -> String
True	= "True"
False	= "False"


cat Functor a where
	map	: (a -> b) -> functor a -> functor b

Everywhere 'functor' is used, the same subtype will be infered. In cat defs, there is no need to explicitly write (functor a:Functor a).

Compare with:

cat Collection a where
	addAll	: Collection a -> collection a -> collection a

which implies that a collection should be able to merge in any other collection; e.g.

addAll	: Collection a -> List a -> List a
addAll	= ...

Which feels quite a bit object-oriented, especially with .-syntax:

list.addAll set


Default methods can be written as

print	: Show -> IO ()
s	= putStrLn $ show s


One can define laws with the cat. If the laws are not fullfilled, the type is NOT part of the cat.

cat Monad a where
	~ neutral element: return a >>= f 	= f a
	~ neutral element: m >>= return 	= m
	return 	: a -> m a
	(>>=)	: Monad m => m a -> (a -> m b) -> m b

Extending classes
-----------------

Sometimes, classes can be extended. For instance, each ''Collection'' should be a ''Functor''.

We express this requirements as

cat Collection a in Functor :
	...


Instance
========

Instance is not obligated. If it is stated, the compiler will check it actually implements all the needed stuff, with the needed laws.

Are types public?
================

As soon as a single function is public, all of the types of it's arguments are public too.
To keep a type private, do not export any function which uses this type.

Note that types can be hidden in imports
-}
